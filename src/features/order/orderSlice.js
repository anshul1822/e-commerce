import { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit';
import { addToOrder, fetchAllOrders, updateOrder } from './orderAPI';

const initialState = {
  orders: [],
  totalOrders : 0,
  status: 'idle',
  currentOrder : null,
  error : null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addToOrderAsync = createAsyncThunk(
  'order/addToOrder',
  async (orderItem) => {
    console.log("add To Order orderItem", orderItem);
    const response = await addToOrder(orderItem);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateOrderAsync = createAsyncThunk(
  'order/updateOrder',
  async (orderItem) => {
    // console.log("orderItem", orderItem);
    const response = await updateOrder(orderItem);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchAllOrdersAsync = createAsyncThunk(
  'order/fetchAllOrders',
  async ({sort, pagination}) => {
    const response = await fetchAllOrders(sort, pagination);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);



export const orderSlice = createSlice({
  name: 'order',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    deleteOrder : (state) => {
      console.log("state.currentOrder: ", state.currentOrder);
        state.currentOrder = null;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addToOrderAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addToOrderAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log("add to order slice", action.payload);
        state.orders.push(action.payload);
        // console.log("currentORder")
        state.currentOrder = action.payload;        
      })
      .addCase(fetchAllOrdersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log("fetchAllOrdersAsync", action.payload);
        state.orders = action.payload.orders;
        state.totalOrders = action.payload.totalOrders;       
      })      
      .addCase(updateOrderAsync.pending, (state, action) => {
        state.status = 'loading';
      }).
      addCase(updateOrderAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.orders.findIndex(item => item.id == action.payload.id)
        state.orders[index] = action.payload;
      });
      ;
  },
});

export const { increment, deleteOrder } = orderSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;
// export const selectAllOrderedItems = (state) => state.order.allOrders;
export const selectOrderedItems = (state) => state.order.orders;
export const selectTotalNoofOrders = (state) => state.order.totalOrders;
export const selectCurrentOrder = (state) => state.order.currentOrder;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default orderSlice.reducer;
